{"version":3,"sources":["webpack:///./components/dropdown/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/29.9dad26bf.js","sourcesContent":["export default \"# Dropdown 下拉框\\n向下弹出的容器。\\n\\n\\n\\n## 基础用法\\n下拉菜单最基本的使用方式。\\n\\n```jsx\\nimport { Dropdown, Button } from 'zarm-web';\\n\\nReactDOM.render(\\n  <Dropdown\\n    content={\\n      <div style={{ width: 200, height: 100, padding: '8px 12px' }}>Dropdown Content</div>\\n    }\\n  >\\n    <Button theme=\\\"primary\\\">Click me</Button>\\n  </Dropdown>\\n, mountNode);\\n```\\n\\n\\n\\n## 受控的下拉框\\n外部控制下拉框的显示与隐藏。\\n\\n```jsx\\nimport { Dropdown, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {\\n    visible: false,\\n  };\\n\\n  onClose = () => {\\n    this.setState({ visible: false });\\n  };\\n\\n  onVisibleChange = (visible) => {\\n    this.setState({ visible });\\n  };\\n\\n  render() {\\n    const { visible } = this.state;\\n\\n    const overlay = (\\n      <div style={{ width: 300, height: 100, padding: '8px 12px' }}>\\n        <Button onClick={this.onClose}>Click me will close the dropdown</Button>\\n      </div>\\n    );\\n\\n    return (\\n        <Dropdown\\n          visible={visible}\\n          onVisibleChange={this.onVisibleChange}\\n          content={overlay}\\n        >\\n          <Button theme=\\\"primary\\\">Click me</Button>\\n        </Dropdown>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 弹窗的定位\\n使用 direction 属性设置弹窗的位置，支持 6 个弹出位置。\\n\\n```jsx\\nimport { Dropdown, Menu, Checkbox, Button } from 'zarm-web';\\n\\nconst directionMap = ['topLeft', 'top', 'topRight', 'bottomLeft', 'bottom', 'bottomRight'];\\nconst overlay = <div style={{ width: 200, height: 100, padding: '8px 12px' }}>Dropdown Content</div>;\\n\\nReactDOM.render(\\n  <>\\n    {\\n      directionMap.map((item, index) => (\\n        <Dropdown\\n          key={+index}\\n          direction={item}\\n          content={overlay}\\n        >\\n          <Button>{item}</Button>\\n        </Dropdown>\\n      ))\\n    }\\n  </>\\n, mountNode);\\n```\\n\\n\\n\\n## 三种触发方式\\n通过 trigger 属性设置触发方式。\\n有 click, hover, contextMenu 三种可选方式。\\n\\n```jsx\\nimport { Dropdown, Menu, Checkbox, Button } from 'zarm-web';\\n\\nconst triggerMap = ['click','hover','contextMenu'];\\nconst overlay = <div style={{ width: 200, height: 100, padding: '8px 12px' }}>Dropdown Content</div>;\\n\\nReactDOM.render(\\n  <>\\n    {\\n      triggerMap.map((item, index) => (\\n        <Dropdown\\n          key={+index}\\n          trigger={item}\\n          content={overlay}\\n        >\\n          <Button>{item}</Button>\\n        </Dropdown>\\n      ))\\n    }\\n  </>\\n, mountNode);\\n```\\n\\n\\n\\n## 显示直角\\n通过 `shape` 设置容器的边缘形状。\\n\\n```jsx\\nimport { Dropdown, Menu, Checkbox, Button } from 'zarm-web';\\n\\nReactDOM.render(\\n  <Dropdown\\n    shape=\\\"rect\\\"\\n    content={\\n      <div style={{ width: 200, height: 100, padding: '8px 12px' }}>\\n        Dropdown Content\\n      </div>\\n    }\\n  >\\n    <Button theme=\\\"primary\\\">Click me</Button>\\n  </Dropdown>\\n, mountNode);\\n```\\n\\n\\n\\n## 禁用状态\\n通过 `disable` 设置禁用状态。\\n\\n```jsx\\nimport { Dropdown, Menu, Checkbox, Button } from 'zarm-web';\\n\\nReactDOM.render(\\n  <Dropdown\\n    disabled\\n    content={\\n      <div style={{ width: 200, height: 100, padding: '8px 12px' }}>\\n        Dropdown Content\\n      </div>\\n    }\\n  >\\n    <Button disabled theme=\\\"primary\\\">Click me</Button>\\n  </Dropdown>\\n, mountNode);\\n```\\n\\n\\n\\n## 位于模态框中的下拉框\\n模态框中的下拉框层级会置于模态框之上。\\n\\n```jsx\\nimport { Dropdown, Menu, Checkbox, Button, Modal } from 'zarm-web';\\n\\nconst overlay = (\\n  <div style={{ width: 300, height: 100, padding: '8px 12px' }}>\\n    Dropdown Content\\n  </div>\\n);\\n\\nclass Demo extends React.Component {\\n  state = {\\n    modalVisible: false,\\n  };\\n\\n  toggleModalVisible = () => {\\n    this.setState((state) => {\\n      return {\\n        modalVisible: !state.modalVisible\\n      }\\n    });\\n  };\\n\\n  render() {\\n    const { modalVisible } = this.state;\\n\\n    return (\\n      <>\\n        <Button theme=\\\"primary\\\" onClick={this.toggleModalVisible}>Open</Button>\\n        <Modal visible={modalVisible}>\\n          <Modal.Header onClose={this.toggleModalVisible} />\\n          <Modal.Body>\\n            <Dropdown\\n              content={\\n                <div style={{ width: 300, height: 100, padding: '8px 12px' }}>\\n                  Dropdown Content1\\n                </div>\\n              }\\n            >\\n              <Button>Button1</Button>\\n            </Dropdown>\\n            <Dropdown\\n              content={\\n                <div style={{ width: 300, height: 100, padding: '8px 12px' }}>\\n                  Dropdown Content2\\n                </div>\\n              }\\n            >\\n              <Button>Button2</Button>\\n            </Dropdown>\\n          </Modal.Body>\\n        </Modal>\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## API\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| content | ReactNode | - | 显示内容 |\\n| disabled | boolean | - | 禁用触发效果 |\\n| shape | string | 'radius' | 容器形状，可选值为 `rect`、`radius` |\\n| destroy | boolean | true | 气泡层关闭后是否移除节点 |\\n| getContainer | HTMLElement &#124; () => HTMLElement | document.body | 指定 Popper 挂载的 HTML 节点 |\\n| animationType | string | 'zoom-fade' | 可选值 `fade`, `door`, `flip`, `rotate`, `zoom`,`moveUp`, `moveDown`, `moveLeft`, `moveRight`,`slideUp`, `slideDown`, `slideLeft`, `slideRight` |\\n| animationDuration | number | 200 | 动画执行时间（单位：毫秒） |\\n| direction | string | 'bottomLeft' | 显示方向，可选值 `topLeft`、`top`、`topRight`、`bottomLeft`、`bottom`、`bottomRight` |\\n| trigger | string | 'click' | 设置触发方式，可选值为 `click`、`hover`、`contextMenu` |\\n| visible | boolean | false | 是否显示 |\\n| onVisibleChange | (visible?: boolean) => void | - | 显示/隐藏 气泡层触发的事件 |\\n\""],"sourceRoot":""}