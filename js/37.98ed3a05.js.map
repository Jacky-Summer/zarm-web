{"version":3,"sources":["webpack:///./components/notification/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/37.98ed3a05.js","sourcesContent":["export default \"# Notification 通知提醒框\\n\\n全局的通知提醒信息。浮于屏幕角落（默认右上角），5s 后自动消失，不会打断用户操作。\\n当鼠标移入移出时会重新计算停留时间。\\n\\n\\n## 基本用法\\n最基本的用法。\\n\\n```jsx\\nimport { Notification, Button } from 'zarm-web';\\n\\nReactDOM.render(\\n  <Button\\n    theme=\\\"primary\\\"\\n    onClick={() => {\\n      Notification.open({\\n        title: 'Notification Title',\\n        content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n      });\\n    }}\\n  >\\n    Open\\n  </Button>\\n, mountNode);\\n```\\n\\n\\n\\n## 特定场景下的通知提醒框\\n特定场景下带图标的通知提醒框。\\n\\n```jsx\\nimport { Notification, Button, Icon } from 'zarm-web';\\n\\nconst options = {\\n  title: 'Notification Title',\\n  content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n};\\n\\nclass Demo extends React.Component {\\n  showSuccess = () => {\\n    Notification.success(options);\\n  };\\n\\n  showInfo = () => {\\n    Notification.info(options);\\n  };\\n\\n  showError = () => {\\n    Notification.error(options);\\n  };\\n\\n  showWarning = () => {\\n    Notification.warning(options);\\n  };\\n\\n  customIcon = () => {\\n    Notification.open({\\n      title: 'Notification Title',\\n      content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n      icon: <Icon type=\\\"question-round-fill\\\" size=\\\"sm\\\" />,\\n    });\\n  };\\n\\n  closeAll = () => Notification.closeAll();\\n\\n  render() {\\n    return (\\n      <>\\n        <Button onClick={this.showSuccess}>Success</Button>\\n        <Button onClick={this.showInfo}>Info</Button>\\n        <Button onClick={this.showWarning}>Warning</Button>\\n        <Button onClick={this.showError}>Error</Button>\\n        <br />\\n        <Button onClick={this.customIcon}>Open a notification with custom icon</Button>\\n        <br />\\n        <Button theme=\\\"danger\\\" onClick={this.closeAll}>Close all notifications</Button>\\n      </>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 自定义样式\\n自定义通知提醒框的样式\\n\\n```jsx\\nimport { Notification, Button } from 'zarm-web';\\n\\nReactDOM.render(\\n  <Button\\n    theme=\\\"primary\\\"\\n    onClick={() => {\\n      Notification.open({\\n        title: 'Notification Title',\\n        content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n        className: 'custom-style',\\n        style: {\\n          width: 400,\\n        }\\n      });\\n    }}\\n  >\\n    Open\\n  </Button>\\n, mountNode);\\n```\\n\\n\\n\\n## 主动关闭\\n自定义通知框的停留时间，默认5s，取消自动关闭只要将该值设为 0 即可，然后主动控制将其关闭。\\n\\n```jsx\\nimport { Notification, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {};\\n\\n  show = () => {\\n    let msgInstance = Notification.info({\\n      title: 'Notification Title',\\n      content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n      stayTime: 0,\\n      onClose: () => {\\n        this.setState({ msgInstance: null });\\n      }\\n    });\\n    this.setState({ msgInstance });\\n  };\\n\\n  close = () => {\\n    this.state.msgInstance.close();\\n  };\\n\\n  render() {\\n    return (\\n      <>\\n        <Button theme=\\\"primary\\\" onClick={this.show} disabled={this.state.msgInstance}>\\n          Open\\n        </Button>\\n        <Button onClick={this.close} disabled={!this.state.msgInstance}>\\n          Close\\n        </Button>\\n      </>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 增加回调\\n需要时可增加点击、关闭回调\\n\\n```jsx\\nimport { Notification, Button } from 'zarm-web';\\n\\nReactDOM.render(\\n  <Button\\n    theme=\\\"primary\\\"\\n    onClick={() => {\\n      Notification.success({\\n        stayTime: 1500,\\n        title: 'Notification Title',\\n        content: 'You can try clicking on me!',\\n        onClick: () => {\\n          alert('You clicked this notification.');\\n        },\\n        onClose: () => {\\n          alert('The notification will be closed');\\n        },\\n      });\\n    }}\\n  >\\n    Open\\n  </Button>\\n, mountNode);\\n```\\n\\n\\n\\n## 自定义底部\\n\\n```jsx\\nimport { Notification, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  open = () => {\\n    let instance = Notification.open({\\n      title: 'Notification Title',\\n      content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n      type: 'success',\\n      stayTime: 0,\\n      footer: (\\n        <>\\n          <Button size=\\\"sm\\\" onClick={() => instance.close()}>\\n            Close\\n          </Button>\\n          <Button theme=\\\"primary\\\" size=\\\"sm\\\" onClick={() => alert('You clicked OK button.')}>\\n            Ok\\n          </Button>\\n        </>\\n      )\\n    });\\n  };\\n\\n  render() {\\n    return <Button theme=\\\"primary\\\" onClick={this.open}>Open</Button>;\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 弹出位置\\n设置不同的弹出位置和偏移距离\\n\\n```jsx\\nimport { Notification, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  show(option) {\\n    Notification.open({\\n      ...option,\\n      title: 'Notification Title',\\n      content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n    });\\n  };\\n\\n  render() {\\n    return (\\n      <>\\n        <Button onClick={() => this.show({ position: 'topRight' })}>topRight</Button>\\n        <Button onClick={() => this.show({ position: 'topLeft' })}>topLeft</Button>\\n        <Button onClick={() => this.show({ position: 'bottomLeft' })}>bottomLeft</Button>\\n        <Button onClick={() => this.show({ position: 'bottomRight' })}>bottomRight</Button>\\n        <br />\\n        <Button onClick={() => this.show({ top: 400 })}>Open the notification 400px from the top</Button>\\n        <br />\\n        <Button onClick={() => this.show({ bottom: 100 })}>Open the notification 100px from the bottom</Button>\\n      </>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 更新指定通知提醒框的状态和内容\\n可以通过唯一的 key 来控制指定的通知提醒框。\\n\\n```jsx\\nimport { Notification, Button } from 'zarm-web';\\nconst key = 'updatable';\\n\\nclass Demo extends React.Component {\\n  show = () => {\\n    Notification.open({\\n      key,\\n      stayTime: 0,\\n      title: 'Notification Title',\\n      content: 'This is the content of the notification. This is the content of the notification. This is the content of the notification. ',\\n    });\\n    setTimeout(() => {\\n      Notification.open({\\n        key,\\n        title: 'New Title',\\n        content: 'This is new content of the notification. ',\\n      });\\n    }, 1000);\\n  };\\n\\n  close = () => {\\n    Notification.close(key);\\n  };\\n\\n  render() {\\n    return (\\n      <>\\n        <Button theme=\\\"primary\\\" onClick={this.show}>Open</Button>\\n        <Button onClick={this.close}>Close</Button>\\n      </>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## API\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| title | ReactNode | - | 通知标题 |\\n| content | ReactNode | - | 展示内容 |\\n| stayTime | number | 5000 | 停留时长(ms)。设置 0 则不自动隐藏 |\\n| position | string | 'topRight' | 弹出位置。可选项：`topLeft`、`topRight`、`bottomLeft`、`bottomRight` |\\n| top | string \\\\| number | - | 脱离堆叠栈，距屏幕顶端位置 |\\n| bottom | string \\\\| number | - | 脱离堆叠栈，距屏幕底端位置 |\\n| icon | string \\\\| ReactElement | - | 图标。可选项：`success`、`info`、`warning`、`error` |\\n| key | string | 自动生成 | 唯一标识，可通过close方法关闭 |\\n| footer | ReactNode | - | 自定义底部显示 |\\n| onClick | (e?: SyntheticEvent<any>) => void | - | 点击时触发的回调函数 |\\n| onClose | (e?: SyntheticEvent<any>) => void | - | 关闭时触发的回调函数 |\\n\\n<h3>静态方法</h3>\\n\\n```jsx\\n// 打开通知\\nNotification.open(options): { close(): void };\\n\\n// 打开指定场景主题的通知\\nNotification.[success|warning|info|error](options | React.ReactNode): { close(): void };\\n\\n// 关闭指定通知\\nNotification.close(key: string): void;\\n\\n// 关闭所有通知\\nNotification.closeAll(): void;\\n\\n// 销毁\\nNotification.destroy(): void;\\n```\\n\""],"sourceRoot":""}