{"version":3,"sources":["webpack:///./components/tabs/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/44.f4f2e02f.js","sourcesContent":["export default \"# Tabs 选项卡\\n选项卡切换组件。\\n\\n\\n\\n## 基本用法\\n\\n```jsx\\nimport { Tabs } from 'zarm-web';\\nconst { Panel } = Tabs;\\n\\nReactDOM.render(\\n  <Tabs>\\n    <Panel title=\\\"Tab1\\\">Content of Tab1</Panel>\\n    <Panel title=\\\"Tab2\\\">Content of Tab2</Panel>\\n    <Panel title=\\\"Tab3\\\">Content of Tab3</Panel>\\n    <Panel title=\\\"Tab4\\\">Content of Tab4</Panel>\\n  </Tabs>\\n, mountNode);\\n```\\n\\n\\n\\n## 多种大小\\n\\n```jsx\\nimport { Tabs, Radio } from 'zarm-web';\\nconst { Panel } = Tabs;\\n\\nclass Demo extends React.Component {\\n  state = {\\n    size: 'md',\\n  }\\n\\n  handleSize = (size) => {\\n    this.setState({ size });\\n  }\\n\\n  render() {\\n    const { size } = this.state;\\n\\n    return (\\n      <>\\n        <div className=\\\"rows\\\">\\n          <Radio.Group ghost type=\\\"button\\\" value={size} onChange={(value) => this.handleSize(value)}>\\n            <Radio value=\\\"sm\\\">sm</Radio>\\n            <Radio value=\\\"md\\\">md</Radio>\\n            <Radio value=\\\"lg\\\">lg</Radio>\\n          </Radio.Group>\\n        </div>\\n        <div className=\\\"rows\\\">\\n          <Tabs size={size}>\\n            <Panel title=\\\"Tab1\\\">Content of Tab1</Panel>\\n            <Panel title=\\\"Tab2\\\">Content of Tab2</Panel>\\n            <Panel title=\\\"Tab3\\\">Content of Tab3</Panel>\\n            <Panel title=\\\"Tab4\\\">Content of Tab4</Panel>\\n          </Tabs>\\n        </div>\\n      </>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 卡片式\\n\\n```jsx\\nimport { Tabs, Icon, Button } from 'zarm-web';\\nconst { Panel } = Tabs;\\n\\nReactDOM.render(\\n  <Tabs type=\\\"card\\\">\\n    <Panel title=\\\"Tab1\\\">Content of Tab1</Panel>\\n    <Panel title=\\\"Tab2\\\">Content of Tab2</Panel>\\n    <Panel title=\\\"Tab3\\\">Content of Tab3</Panel>\\n    <Panel title=\\\"Tab4\\\">Content of Tab4</Panel>\\n  </Tabs>\\n, mountNode);\\n```\\n\\n\\n\\n## 无边框卡片式\\n\\n```jsx\\nimport { Tabs, Button } from 'zarm-web';\\nconst { Panel } = Tabs;\\n\\nReactDOM.render(\\n  <div className=\\\"box\\\" style={{ background: '#f2f2f2', padding: 32 }}>\\n    <Tabs type=\\\"noborder-card\\\">\\n      <Panel title=\\\"Tab1\\\" style={{ height: 100, padding: 15 }}>Content of Tab1</Panel>\\n      <Panel title=\\\"Tab2\\\" style={{ height: 100, padding: 15 }}>Content of Tab2</Panel>\\n      <Panel title=\\\"Tab3\\\" style={{ height: 100, padding: 15 }}>Content of Tab3</Panel>\\n      <Panel title=\\\"Tab4\\\" style={{ height: 100, padding: 15 }}>Content of Tab4</Panel>\\n    </Tabs>\\n  </div>\\n, mountNode);\\n```\\n\\n\\n\\n## 可滚动\\n\\n```jsx\\nimport { Tabs, Radio } from 'zarm-web';\\nconst { Panel } = Tabs;\\n\\nclass Demo extends React.Component {\\n  state = {\\n    direction: 'horizontal',\\n  };\\n\\n  handleDirection = (direction) => {\\n    this.setState({ direction });\\n  }\\n\\n  render() {\\n    const { direction } = this.state;\\n\\n    return (\\n      <>\\n        <div className=\\\"rows\\\">\\n          <Radio.Group\\n            ghost\\n            type=\\\"button\\\"\\n            value={direction}\\n            onChange={(value) => this.handleDirection(value)}\\n          >\\n            <Radio value=\\\"horizontal\\\">Horizontal</Radio>\\n            <Radio value=\\\"vertical\\\">Vertical</Radio>\\n          </Radio.Group>\\n        </div>\\n        <div className=\\\"rows\\\">\\n          <Tabs\\n            style={{ height: 200 }}\\n            direction={direction}\\n            onPrevClick={(e) => console.log('prev click: ', e)}\\n            onNextClick={(e) => console.log('next click', e)}\\n          >\\n            {\\n              [...Array(20).keys()].map((item, index) => (\\n                <Panel key={+index} title={`Tab${index + 1}`}>\\n                  Content of Tab{index + 1}\\n                </Panel>\\n              ))\\n            }\\n          </Tabs>\\n        </div>\\n      </>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 新增和关闭\\n\\n```jsx\\nimport { Tabs, Button } from 'zarm-web';\\nconst { Panel } = Tabs;\\n\\nclass Demo extends React.Component {\\n  state = {\\n    value: 2,\\n    tabs: [\\n      {\\n        closable: true,\\n        title: 'Tab1',\\n      }, {\\n        closable: true,\\n        title: 'Tab2',\\n      }, {\\n        closable: true,\\n        title: 'Tab3',\\n      },\\n    ]\\n  };\\n  \\n  onTabClose = (targetIndex) => {\\n    const { tabs, value } = this.state;\\n    const filterTabs = tabs.filter((item, index) => targetIndex !== index);\\n    let currentValue;\\n    if (targetIndex !== 0) {\\n      if (targetIndex > value) {\\n        currentValue = value;\\n      } else {\\n        currentValue = value - 1;\\n      }\\n    } else {\\n      currentValue = 0;\\n    }\\n    this.setState({\\n      tabs: filterTabs,\\n      value: currentValue,\\n    });\\n  }\\n\\n  onTabAdd = () => {\\n    const { tabs, value } = this.state;\\n    tabs.push({\\n      title: 'New Tap',\\n      closable: true,\\n      key: Math.random().toString(36).substring(2) + Date.now().toString(36),\\n    });\\n    this.setState({\\n      tabs,\\n      value: tabs.length - 1,\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"edit-tabs\\\">\\n        <Tabs\\n          type=\\\"card\\\"\\n          value={this.state.value}\\n          onChange={(index) => this.setState({ value: index })}\\n          onTabClose={this.onTabClose}\\n        >\\n          {\\n            this.state.tabs.map((item, index) => (\\n              <Panel key={+index} title={item.title} closable={item.closable}>\\n                Content of {item.title}\\n              </Panel>\\n            ))\\n          }\\n        </Tabs>\\n        <div className=\\\"add-button\\\" onClick={this.onTabAdd}>+</div>\\n      </div>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## API\\n\\n<h3>Tabs</h3>\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| value | number | 0 | 当前选中的选项卡索引值 |\\n| defaultValue | number | 0 | 默认选中的选项卡索引值 |\\n| type | string | 'line' | 选项卡类型，可选值为 `line` 、 `card` 、 `noborder-card`，分别表示线型、卡片型、无边框卡片型 |\\n| direction | string | 'horizontal' | 选项卡方向 可选值为`horizontal` 、 `vertical`，分别表示横向和纵向 |\\n| size | string | 'md' | 选项卡大小 可选值为`sm` 、 `md` 、 `lg`  |\\n| animated | boolean | true | 是否使用切换动画，在direction为`horizontal`时生效 |\\n| onChange | (index?: number) => void | - | 选项卡切换时触发的回调函数，参数为当前选中的选项卡索引值 |\\n| onTabClose | (index?: number) => void | - | 点击选项卡关闭按钮时触发的回调函数，参数为当前删除的选项卡索引值 |\\n| onPrevClick | (e?: number) => void | - | 点击上一页的箭头触发的回调函数 |\\n| onNextClick | (e?: number) => void | - | 点击下一页的箭头触发的回调函数 |\\n\\n<h3>Tabs.Panel</h3>\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| title | string | - | 选项卡名称 |\\n| disabled | boolean | false | 是否禁用 |\\n| closable | boolean | false | 是否可关闭 |\\n\""],"sourceRoot":""}