{"version":3,"sources":["webpack:///./components/drawer/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/28.7e3e1bac.js","sourcesContent":["export default \"# Drawer 抽屉\\n屏幕边缘滑出的浮层面板。\\n\\n\\n\\n## 基本用法\\n抽屉从父窗体边缘滑入，覆盖住部分父窗体内容。用户在抽屉内操作时不必离开当前任务，操作完成后，可以平滑地回到到原任务。\\n\\n```jsx\\nimport { Drawer, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {\\n    visible: false\\n  };\\n\\n  toggle = () => {\\n    this.setState({\\n      visible: !this.state.visible,\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <Button theme=\\\"primary\\\" onClick={this.toggle}>Open</Button>\\n        <Drawer\\n          title=\\\"Drawer Title\\\"\\n          visible={this.state.visible}\\n          onClose={this.toggle}\\n          afterOpen={() => console.log('afterOpen')}\\n          afterClose={() => console.log('afterClose')}\\n        >\\n          Content of Drawer\\n        </Drawer>\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 尺寸\\n抽屉尺寸分为 'lg'， 'md'， 'sm'；分别占窗口宽度的80%， 62%， 38%。\\n\\n```jsx\\nimport { Drawer, Radio, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {\\n    visible: false,\\n    size: 'md',\\n  };\\n\\n  handleSize = (size) => {\\n    this.setState({ size });\\n  };\\n\\n  toggle = () => {\\n    this.setState({\\n      visible: !this.state.visible,\\n    });\\n  };\\n\\n  render() {\\n    const { visible, size } = this.state;\\n    return (\\n      <>\\n        <div className=\\\"rows\\\">\\n          <Radio.Group ghost type=\\\"button\\\" value={size} onChange={this.handleSize} style={{ marginRight: 10 }}>\\n            <Radio value=\\\"sm\\\">sm</Radio>\\n            <Radio value=\\\"md\\\">md</Radio>\\n            <Radio value=\\\"lg\\\">lg</Radio>\\n          </Radio.Group>\\n        </div>\\n        <div className=\\\"rows\\\">\\n          <Button theme=\\\"primary\\\" onClick={this.toggle}>Open</Button>\\n        </div>\\n        <Drawer\\n          visible={visible}\\n          size={size}\\n          onClose={this.toggle}\\n          afterOpen={() => console.log('afterOpen')}\\n          afterClose={() => console.log('afterClose')}\\n        >\\n          Content of Drawer\\n        </Drawer>\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 遮罩层可关闭\\n点击遮罩层区域可以关闭，可以隐藏关闭按钮。\\n\\n```jsx\\nimport { Drawer, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {\\n    visible: false\\n  };\\n\\n  toggle = () => {\\n    this.setState({\\n      visible: !this.state.visible,\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <Button theme=\\\"primary\\\" onClick={this.toggle}>Open</Button>\\n        <Drawer\\n          maskClosable\\n          closable={false}\\n          visible={this.state.visible}\\n          onClose={this.toggle}\\n          afterOpen={() => console.log('afterOpen')}\\n          afterClose={() => console.log('afterClose')}\\n        >\\n          Click mask layer to close the Drawer!\\n        </Drawer>\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 多层抽屉\\n在抽屉内打开新的抽屉，用以解决多分支任务的复杂状况。\\n\\n```jsx\\nimport { Drawer, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {\\n    visible_first: false,\\n    visible_second: false,\\n    visible_three: false,\\n  };\\n\\n  toggle = (key) => {\\n    this.setState({\\n      [`visible_${key}`]: !this.state[`visible_${key}`],\\n    });\\n  }\\n\\n  render() {\\n    const { visible_first, visible_second, visible_three } = this.state;\\n\\n    return (\\n      <>\\n        <Button theme=\\\"primary\\\" onClick={() => this.toggle('first')}>Open the first drawer</Button>\\n        <Drawer\\n          size=\\\"lg\\\"\\n          visible={visible_first}\\n          onClose={() => this.toggle('first')}\\n          afterOpen={() => console.log('afterOpen1')}\\n          afterClose={() => console.log('afterClose1')}\\n        >\\n          <Button theme=\\\"primary\\\" onClick={() => this.toggle('second')}>Open the second drawer</Button>\\n          <Drawer\\n            size=\\\"sm\\\"\\n            visible={visible_second}\\n            onClose={() => this.toggle('second')}\\n            afterOpen={() => console.log('afterOpen2')}\\n            afterClose={() => console.log('afterClose2')}\\n          >\\n            <Button theme=\\\"primary\\\" onClick={() => this.toggle('three')}>Open the three drawer</Button>\\n            <Drawer\\n              size=\\\"md\\\"\\n              visible={visible_three}\\n              onClose={() => this.toggle('three')}\\n              afterOpen={() => console.log('afterOpen3')}\\n              afterClose={() => console.log('afterClose3')}\\n            >\\n              Content of Drawer\\n            </Drawer>\\n          </Drawer>\\n        </Drawer>\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## API\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| visible | boolean | false | 是否显示 |\\n| size | string | 'md' | 可选值`lg`, `md`, `sm`, 分别为窗口的80%， 62%， 38%，当属性width存在时以width宽度为主 |\\n| title | ReactNode | - | 抽屉标题 |\\n| mask | boolean | true | 是否展示遮罩层 |\\n| maskClosable | boolean | false | 是否允许点击遮罩层来关闭抽屉 |\\n| afterOpen | () => void | - | 弹层展示后的回调 |\\n| afterClose | () => void | - | 弹层关闭后的回调 |\\n| onClose | () => void | - | 关闭抽屉时触发的回调函数 |\\n\\n\""],"sourceRoot":""}