{"version":3,"sources":["webpack:///./components/tag/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/45.e1a45927.js","sourcesContent":["export default \"# Tag 标签\\n用于标记和分类。\\n\\n\\n\\n## 颜色类型\\n以下提供在不同场景中可选择不同颜色为特定功能所使用\\n\\n```jsx\\nimport { Tag } from 'zarm-web';\\n\\nReactDOM.render(\\n  <>\\n    <div className=\\\"rows\\\">\\n      <Tag>default</Tag>\\n      <h3>四种预置颜色</h3>\\n      <Tag color=\\\"green\\\">green</Tag>\\n      <Tag color=\\\"blue\\\">blue</Tag>\\n      <Tag color=\\\"orange\\\">orange</Tag>\\n      <Tag color=\\\"red\\\">red</Tag>\\n    </div>\\n    <div className=\\\"rows\\\">\\n      <h3>自定义颜色</h3>\\n      <Tag color=\\\"#00bc70\\\">#00bc70</Tag>\\n      <Tag color=\\\"#54c0e8\\\">#54c0e8</Tag>\\n      <Tag color=\\\"#ec9131\\\">#ec9131</Tag>\\n      <Tag color=\\\"#ff5050\\\">#ff5050</Tag>\\n      <Tag color=\\\"#616161\\\">#616161</Tag>\\n    </div>\\n  </>\\n, mountNode);\\n```\\n\\n\\n\\n## 边框\\n可以设置边框属性\\n\\n```jsx\\nimport { Tag } from 'zarm-web';\\n\\nReactDOM.render(\\n  <>\\n    <Tag bordered={false}>default</Tag>\\n    <Tag bordered={false} color=\\\"green\\\">green</Tag>\\n    <Tag bordered={false} color=\\\"blue\\\">blue</Tag>\\n    <Tag bordered={false} color=\\\"orange\\\">orange</Tag>\\n    <Tag bordered={false} color=\\\"red\\\">red</Tag>\\n  </>\\n, mountNode);\\n```\\n\\n\\n\\n## 圆角\\n可以设置圆角大小\\n\\n```jsx\\nimport { Tag } from 'zarm-web';\\n\\nReactDOM.render(\\n  <>\\n    <Tag>radius</Tag>\\n    <Tag shape=\\\"rect\\\">rect</Tag>\\n    <Tag shape=\\\"round\\\">round</Tag>\\n  </>\\n, mountNode);\\n```\\n\\n\\n\\n## 尺寸\\n可以设置尺寸大小\\n\\n```jsx\\nimport { Tag } from 'zarm-web';\\n\\nReactDOM.render(\\n  <>\\n    <Tag size=\\\"lg\\\">lg</Tag>\\n    <Tag>md</Tag>\\n    <Tag size=\\\"sm\\\">sm</Tag>\\n    <Tag size=\\\"xs\\\">xs</Tag>\\n  </>\\n, mountNode);\\n```\\n\\n\\n\\n## 可删除\\n用数组生成一组标签，可以动态添加和删除\\n\\n```jsx\\nimport { Tag, Icon, Input, Button } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {\\n    tags: ['Tag1', 'Tag2'],\\n    inputValue: '',\\n    inputVisible: false,\\n  };\\n\\n  onCloseTag = (index) => {\\n    const { tags } = this.state;\\n    tags.splice(index, 1);\\n    this.setState({ tags });\\n  };\\n\\n  onShowInput = () => {\\n    this.setState({\\n      inputVisible: true,\\n    }, () => {\\n      this.input.focus();\\n    });\\n  };\\n\\n  onBlur = () => {\\n    const { inputValue, tags } = this.state;\\n\\n    if (inputValue.trim()) {\\n      this.setState({\\n        tags: [...tags, inputValue],\\n        inputVisible: false,\\n        inputValue: '',\\n      });\\n    } else {\\n      this.setState({\\n        inputVisible: false,\\n        inputValue: ''\\n      });\\n    }\\n  };\\n\\n  onValueChange = (e) => {\\n    this.setState({ inputValue: e.target.value });\\n  };\\n\\n  onKeydown = (e) => {\\n    if (e.keyCode === 13) {\\n      this.onBlur();\\n    }\\n  };\\n\\n  onRemoveAll = () => {\\n    this.setState({\\n      tags: [],\\n    });\\n  };\\n\\n  render() {\\n    const { tags, inputValue, inputVisible } = this.state;\\n    return (\\n      <>\\n        {\\n          tags.map((tag, index) => {\\n            return (\\n              <Tag closable key={+index} onClose={() => this.onCloseTag(index)}>\\n                {tag.length > 16 ? tag.slice(0, 16) + '...' : tag}\\n              </Tag>\\n            );\\n          })\\n        }\\n        <br />\\n        {\\n          inputVisible\\n            ? <Input\\n                ref={(ele) => this.input = ele }\\n                bordered\\n                value={inputValue}\\n                onChange={this.onValueChange}\\n                onBlur={this.onBlur}\\n                onKeyDown={this.onKeydown}\\n                style={{\\n                  width: 80,\\n                }}\\n              />\\n            : <Button ref={(ele) => this.button = ele } onClick={this.onShowInput}>+ New Tag</Button>\\n        }\\n        <Button theme=\\\"danger\\\" style={{ marginLeft: 10 }} onClick={this.onRemoveAll}>Remove All</Button>\\n      </>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 可选择\\n可通过 `CheckableTag` 实现类似 Checkbox 的效果，点击切换选中效果\\n\\n```jsx\\nimport { Tag } from 'zarm-web';\\n\\nconst { CheckableTag } = Tag;\\n\\nclass Demo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      cities: [\\n        {\\n          name: '上海',\\n          checked: false,\\n        },\\n        {\\n          name: '北京',\\n          checked: true,\\n        },\\n        {\\n          name: '深圳',\\n          checked: false,\\n        },\\n        {\\n          name: '台湾',\\n          checked: false,\\n          disabled: true,\\n        }\\n      ]\\n    }\\n  }\\n\\n  selectItem = (nextStatus, index) => {\\n    const { cities } = this.state\\n    const item = cities[index];\\n    item.checked = nextStatus;\\n    cities.splice(index, 1, item);\\n\\n    this.setState({\\n      cities: cities,\\n    }, console.log('当前选中的城市:', this.state.cities.filter(c => c.checked)))\\n  }\\n\\n  render() {\\n    const { cities } = this.state;\\n\\n    return (\\n      <>\\n        {\\n          cities.map((city, index) => {\\n            return (\\n              <CheckableTag\\n                disabled={city.disabled}\\n                checked={city.checked}\\n                onChange={checked => this.selectItem(checked, index)}\\n                key={index + city.name}\\n              >\\n                {city.name}\\n              </CheckableTag>\\n            );\\n          })\\n        }\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## API\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| size | string | 'md' | 设置大小，可选值为 `lg`、`md`、`sm`、`xs` |\\n| shape | string | 'radius' | 设置形状，可选值为 `rect`、`radius`、`round` |\\n| color | string | - | 设置颜色，可选值为 `green`、`blue`、 `red`、 `orange` 或者自定义颜色值 |\\n| bordered | boolean | true | 是否边框样式 |\\n| closable | boolean | false | 是否可关闭 |\\n| onClose | (e) => void | - | 关闭回调事件，closable 为 `true` 时生效 |\\n\\n<h3>Tag.CheckableTag</h3>\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| size | string | 'md' | 设置大小，可选值为 `lg`、`md`、`sm`、`xs` |\\n| shape | string | 'radius' | 设置形状，可选值为 `radius`、`rect`、`round` |\\n| disabled | boolean | false | 设置是否可切换 |\\n| onChange | (checked: boolean) => void | - | 选中状态变化事件，参数为切换后的状态 |\\n\""],"sourceRoot":""}